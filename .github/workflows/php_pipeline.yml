name: Build and Deploy PHP Application

on:
  push:
    branches:
      - main
      - security-pipeline
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      # Step 2: Run SonarQube Scan
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 3: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 4: Run PHP Lint
      - name: Run PHP Lint
        run: |
          php -l index.php

      # Step 5: Run PHP Unit Tests (if any)
      - name: Run Tests
        run: |
          if [ -d tests ]; then
            ./vendor/bin/phpunit --configuration phpunit.xml
          else
            echo "No tests found, skipping."
          fi

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh  # Create the .ssh directory if it doesn't exist
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Write the private key to id_rsa file
          chmod 600 ~/.ssh/id_rsa  # Set proper permissions for the private key
          
        # Step 7: Deploy to GCP VM
      - name: Deploy to GCP VM
        env:
          GCP_USER: ${{ secrets.GCP_USER }}          # Get VM user from secrets
          GCP_VM_IP: ${{ secrets.GCP_VM_IP }}        # Get VM IP from secrets
        run: |
          # Add VM to known hosts
          ssh-keyscan -H $GCP_VM_IP >> ~/.ssh/known_hosts

          # Deploy code to VM using rsync
          rsync -avz --delete ./ $GCP_USER@$GCP_VM_IP:/var/www/php-app

          # Restart PHP Application
          ssh $GCP_USER@$GCP_VM_IP << 'EOF'
            sudo pkill -f "php -S" || true  # Stop any running instance of PHP
            cd /var/www/php-app              # Change to the app directory
            nohup php -S 0.0.0.0:8004 > app.log 2>&1 &  # Start PHP server in background
          EOF
