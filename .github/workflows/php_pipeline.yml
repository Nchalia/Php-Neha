name: Build and Deploy PHP Application

on:
  push:
    branches:
      - security-pipeline
  pull_request:
    branches:
      - security-pipeline
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      # Step 2: Run SonarQube Scan
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 3: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 4: Run PHP Lint
      - name: Run PHP Lint
        run: |
          php -l index.php

      # Step 5: Run PHP Unit Tests (if any)
      - name: Run Tests
        run: |
          if [ -d tests ]; then
            ./vendor/bin/phpunit --configuration phpunit.xml
          else
            echo "No tests found, skipping."
          fi

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh  # Create the .ssh directory if it doesn't exist
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Write the private key to id_rsa file
          chmod 600 ~/.ssh/id_rsa  # Set proper permissions for the private key

      # Step 7: Add the SSH Host to Known Hosts (to avoid SSH warnings)
      - name: Add GCP VM IP to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
          
      # Step 8: Test SSH Connection (for debugging)
      - name: Test SSH connection
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_VM_IP }} "echo 'SSH is working!'"

