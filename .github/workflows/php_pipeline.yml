name: Pull Request Validation Pipeline

on:
  push:
    branches:
      - pr-pipelinenew
  pull_request:
    branches:
      - pr-pipelinenew
    types: [opened, synchronize, reopened]

jobs:
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for Sonar relevance

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 3: Install dependencies for SonarQube (if any)
      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Step 4: Run SonarQube Analysis
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Fail the job if SonarQube finds issues
    outputs:
      sonar-status: ${{ steps.sonar.outputs.sonar-status }}
    continue-on-error: false  # Fail the workflow if the analysis fails

      # # Step 6: Run PHP Unit Tests (if any)
      # - name: Run Tests
      #   run: |
      #     if [ -d tests ]; then
      #       ./vendor/bin/phpunit --configuration phpunit.xml
      #     else
      #       echo "No tests found, skipping."
      #     fi

      # # Step 7: Install Composer Dependencies
      # - name: Install Composer Dependencies
      #   run: composer install --no-dev --optimize-autoloader

      # # Step 8: Prepare files for deployment
      # - name: Prepare files for deployment
      #   run: |
      #     mkdir -p ./publish
      #     rsync -av --progress . ./publish --exclude publish --exclude private_key.pem

      # # Step 9: Create target directory on the remote server (GCP VM)
      # - name: Create target directory on server
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.GCP_VM_IP }}
      #     username: ${{ secrets.GCP_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       mkdir -p /home/${{ secrets.GCP_USER }}/php-app/
      #       chmod 755 /home/${{ secrets.GCP_USER }}/php-app/

      # # Step 10: Deploy application to GCP VM
      # - name: Deploy to GCP VM
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.GCP_VM_IP }}
      #     username: ${{ secrets.GCP_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     source: "./publish/*"
      #     target: "/home/${{ secrets.GCP_USER }}/php-app/"

      # # Step 11: Start PHP Server
      # - name: Start PHP Server
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.GCP_VM_IP }}
      #     username: ${{ secrets.GCP_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /home/${{ secrets.GCP_USER }}/php-app/publish
      #       nohup php -S 0.0.0.0:8004 > php_server.log 2>&1

