name: PHP Build and Deploy Pipeline

on:
  push:
    branches:
      - pr-pipelinenew
  pull_request:
    branches:
      - pr-pipelinenew
    types: [opened, synchronize, reopened]

jobs:
  validation:
    name: Pull Request Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Run only for pull requests

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for Sonar relevance

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 3: Install dependencies for SonarQube (if any)
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Step 4: Run SonarQube Analysis
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 5: Run PHP Lint
      - name: Run PHP Lint
        run: php -l index.php

      # Step 6: Run PHPUnit Tests
      - name: Run PHPUnit Tests
        run: |
          if [ -d tests ]; then
            ./vendor/bin/phpunit --configuration phpunit.xml
          else
            echo "No tests found, skipping."
          fi

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Run only for push events

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for Sonar relevance

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 3: Run PHP Lint
      - name: Run PHP Lint
        run: php -l index.php

      # Step 4: Install Dependencies
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Step 5: Prepare Files for Deployment
      - name: Prepare files for deployment
        run: |
          mkdir -p ./publish
          rsync -av --progress . ./publish --exclude publish --exclude private_key.pem

      # Step 6: Create SSH Key File
      - name: Create SSH Key File
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 7: Create Target Directory on Server
      - name: Create target directory on server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/${{ secrets.GCP_USER }}/php-app/
            chmod 755 /home/${{ secrets.GCP_USER }}/php-app/

      # Step 8: Deploy Application to GCP VM
      - name: Deploy to GCP VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./publish/*"
          target: "/home/${{ secrets.GCP_USER }}/php-app/"
          debug: true

      # Step 9: Start PHP Server
      - name: Start PHP Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.GCP_USER }}/php-app/publish
            nohup php -S 0.0.0.0:8004 > php_server.log 2>&1 &
